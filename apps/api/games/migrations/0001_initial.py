# Generated by Django 5.1.3 on 2025-02-21 05:13

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Competition',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='uuid')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='deleted at')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('description', models.TextField(verbose_name='Description about the Competition')),
                ('min_entry_fee', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Competition minimum entry fee')),
                ('max_entry_fee', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, verbose_name='Competition maximum entry fee, 0 if not upper limit.')),
                ('max_players', models.IntegerField(default=1, verbose_name='Maximum number of participants, 0 for no limit.')),
                ('max_score_per_player', models.IntegerField(default=1, verbose_name='Maximum number of times a player can submit score(s).')),
                ('start_time', models.DateTimeField(verbose_name='Competition start time')),
                ('end_time', models.DateTimeField(blank=True, null=True, verbose_name='Competition end time')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='competitions', to=settings.AUTH_USER_MODEL)),
                ('ranking_method', models.ForeignKey(blank=True, limit_choices_to={'type': 'ranking_method'}, on_delete=django.db.models.deletion.RESTRICT, related_name='+', to='core.datalookup')),
                ('tiebreaker_rule', models.ForeignKey(blank=True, limit_choices_to={'type': 'tiebreaker_rule'}, on_delete=django.db.models.deletion.RESTRICT, related_name='+', to='core.datalookup', verbose_name='Determines how ranking is resolved if two players have the same score')),
                ('type', models.ForeignKey(blank=True, limit_choices_to={'type': 'competition_type'}, on_delete=django.db.models.deletion.RESTRICT, related_name='+', to='core.datalookup')),
            ],
            options={
                'verbose_name': 'Competition',
                'verbose_name_plural': 'Competitions',
                'db_table': 'competition',
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='CompetitionEntry',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='uuid')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='deleted at')),
                ('entry_fee', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Competition entry fee')),
                ('competition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entries', to='games.competition')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entries', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Competition Entry',
                'verbose_name_plural': 'Competition Entries',
                'db_table': 'competition_entry',
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='Score',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='uuid')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='deleted at')),
                ('score', models.IntegerField(verbose_name='Submitted Score')),
                ('entry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scores', to='games.competitionentry')),
            ],
            options={
                'verbose_name': 'Score',
                'verbose_name_plural': 'Scores',
                'db_table': 'score',
                'ordering': ['-score'],
            },
        ),
        migrations.AddIndex(
            model_name='competition',
            index=models.Index(fields=['created_at'], name='competition_created_at_idx'),
        ),
        migrations.AddIndex(
            model_name='competition',
            index=models.Index(fields=['updated_at'], name='competition_updated_at_idx'),
        ),
        migrations.AddIndex(
            model_name='competition',
            index=models.Index(fields=['deleted_at'], name='competition_deleted_at_idx'),
        ),
        migrations.AddConstraint(
            model_name='competition',
            constraint=models.UniqueConstraint(condition=models.Q(('name__isnull', False), ('deleted_at__isnull', True)), fields=('name',), name='competition_name_idx'),
        ),
        migrations.AddConstraint(
            model_name='competitionentry',
            constraint=models.UniqueConstraint(fields=('competition', 'player'), name='unique_competition_entry'),
        ),
    ]
